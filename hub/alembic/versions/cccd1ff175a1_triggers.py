"""triggers

Revision ID: cccd1ff175a1
Revises: ab9d036fdde9
Create Date: 2024-09-18 20:31:33.525244

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cccd1ff175a1'
down_revision: Union[str, None] = 'ab9d036fdde9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('public.urdep_governor_component_governor_uuid_fkey', 'public.urdep_governor_component', type_='foreignkey')
    op.drop_constraint('public.urdep_governor_component_linked_governor_uuid_fkey', 'public.urdep_governor_component', type_='foreignkey')
    op.create_foreign_key(None, 'public.urdep_governor_component', 'urdep_governor', ['governor_uuid'], ['uuid'], referent_schema='public', ondelete='CASCADE')
    op.create_foreign_key(None, 'public.urdep_governor_component', 'urdep_governor', ['linked_governor_uuid'], ['uuid'], referent_schema='public')
    op.alter_column('urdep_action', 'kind',
               existing_type=postgresql.ENUM('provision', 'start', 'stop', 'status', 'destroy', name='urdep_action_kind'),
               type_=sa.Enum('provision', 'start', 'stop', 'status', 'destroy', name='urdep_action_kind', schema='public', inherit_schema=True, create_constraint=True),
               existing_nullable=False)
    op.alter_column('urdep_action', 'action_state',
               existing_type=postgresql.ENUM('new', 'waiting', 'pending', 'running', 'failed', 'successful', name='urdep_action_state'),
               type_=sa.Enum('new', 'waiting', 'pending', 'running', 'failed', 'successful', name='urdep_action_state', schema='public', inherit_schema=True, create_constraint=True),
               existing_nullable=False,
               existing_server_default=sa.text("'new'::urdep_action_state"))
    op.drop_constraint('urdep_action_actuator_uuid_fkey', 'urdep_action', type_='foreignkey')
    op.drop_constraint('urdep_action_subject_uuid_fkey', 'urdep_action', type_='foreignkey')
    op.create_foreign_key(None, 'urdep_action', 'urdep_subject', ['subject_uuid'], ['uuid'], source_schema='public', referent_schema='public', ondelete='CASCADE')
    op.create_foreign_key(None, 'urdep_action', 'urdep_actuator', ['actuator_uuid'], ['uuid'], source_schema='public', referent_schema='public', ondelete='CASCADE')
    op.drop_constraint('urdep_governor_start_actuator_uuid_fkey', 'urdep_governor', type_='foreignkey')
    op.drop_constraint('urdep_governor_destroy_actuator_uuid_fkey', 'urdep_governor', type_='foreignkey')
    op.drop_constraint('urdep_governor_provision_actuator_uuid_fkey', 'urdep_governor', type_='foreignkey')
    op.drop_constraint('urdep_governor_stop_actuator_uuid_fkey', 'urdep_governor', type_='foreignkey')
    op.drop_constraint('urdep_governor_status_actuator_uuid_fkey', 'urdep_governor', type_='foreignkey')
    op.create_foreign_key(None, 'urdep_governor', 'urdep_actuator', ['provision_actuator_uuid'], ['uuid'], source_schema='public', referent_schema='public')
    op.create_foreign_key(None, 'urdep_governor', 'urdep_actuator', ['status_actuator_uuid'], ['uuid'], source_schema='public', referent_schema='public')
    op.create_foreign_key(None, 'urdep_governor', 'urdep_actuator', ['destroy_actuator_uuid'], ['uuid'], source_schema='public', referent_schema='public')
    op.create_foreign_key(None, 'urdep_governor', 'urdep_actuator', ['start_actuator_uuid'], ['uuid'], source_schema='public', referent_schema='public')
    op.create_foreign_key(None, 'urdep_governor', 'urdep_actuator', ['stop_actuator_uuid'], ['uuid'], source_schema='public', referent_schema='public')
    op.alter_column('urdep_subject', 'current_state',
               existing_type=postgresql.ENUM('new', 'provision-waiting', 'provision-pending', 'provisioning', 'provision-failed', 'start-waiting', 'start-pending', 'starting', 'start-failed', 'started', 'stop-waiting', 'stop-pending', 'stopping', 'stop-failed', 'stopped', 'destroy-waiting', 'destroy-pending', 'destroying', 'destroy-failed', 'destroyed', name='urdep_subject_current_state'),
               type_=sa.Enum('new', 'provision-waiting', 'provision-pending', 'provisioning', 'provision-failed', 'start-waiting', 'start-pending', 'starting', 'start-failed', 'started', 'stop-waiting', 'stop-pending', 'stopping', 'stop-failed', 'stopped', 'destroy-waiting', 'destroy-pending', 'destroying', 'destroy-failed', 'destroyed', name='urdep_subject_current_state', schema='public', inherit_schema=True, create_constraint=True),
               existing_nullable=False,
               existing_server_default=sa.text("'new'::urdep_subject_current_state"))
    op.alter_column('urdep_subject', 'desired_state',
               existing_type=postgresql.ENUM('started', 'stopped', 'destroyed', name='urdep_subject_desired_state'),
               type_=sa.Enum('started', 'stopped', 'destroyed', name='urdep_subject_desired_state', schema='public', inherit_schema=True, create_constraint=True),
               existing_nullable=False,
               existing_server_default=sa.text("'started'::urdep_subject_desired_state"))
    op.drop_constraint('urdep_subject_governor_uuid_fkey', 'urdep_subject', type_='foreignkey')
    op.create_foreign_key(None, 'urdep_subject', 'urdep_governor', ['governor_uuid'], ['uuid'], source_schema='public', referent_schema='public')
    public_urdep_subject_urdep_inherit_subject_desired_state = PGTrigger(
        schema="public",
        signature="urdep_inherit_subject_desired_state",
        on_entity="public.urdep_subject",
        is_constraint=False,
        definition='BEFORE INSERT OR UPDATE ON urdep_subject\n  FOR EACH ROW\n  EXECUTE FUNCTION urdep_inherit_subject_desired_state()'
    )
    op.create_entity(public_urdep_subject_urdep_inherit_subject_desired_state)

    public_urdep_subject_urdep_propagate_subject_desired_state = PGTrigger(
        schema="public",
        signature="urdep_propagate_subject_desired_state",
        on_entity="public.urdep_subject",
        is_constraint=False,
        definition='AFTER INSERT OR UPDATE ON urdep_subject\n  FOR EACH ROW\n  EXECUTE FUNCTION urdep_propagate_subject_desired_state()'
    )
    op.create_entity(public_urdep_subject_urdep_propagate_subject_desired_state)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_urdep_subject_urdep_propagate_subject_desired_state = PGTrigger(
        schema="public",
        signature="urdep_propagate_subject_desired_state",
        on_entity="public.urdep_subject",
        is_constraint=False,
        definition='AFTER INSERT OR UPDATE ON urdep_subject\n  FOR EACH ROW\n  EXECUTE FUNCTION urdep_propagate_subject_desired_state()'
    )
    op.drop_entity(public_urdep_subject_urdep_propagate_subject_desired_state)

    public_urdep_subject_urdep_inherit_subject_desired_state = PGTrigger(
        schema="public",
        signature="urdep_inherit_subject_desired_state",
        on_entity="public.urdep_subject",
        is_constraint=False,
        definition='BEFORE INSERT OR UPDATE ON urdep_subject\n  FOR EACH ROW\n  EXECUTE FUNCTION urdep_inherit_subject_desired_state()'
    )
    op.drop_entity(public_urdep_subject_urdep_inherit_subject_desired_state)

    op.drop_constraint(None, 'urdep_subject', schema='public', type_='foreignkey')
    op.create_foreign_key('urdep_subject_governor_uuid_fkey', 'urdep_subject', 'urdep_governor', ['governor_uuid'], ['uuid'])
    op.alter_column('urdep_subject', 'desired_state',
               existing_type=sa.Enum('started', 'stopped', 'destroyed', name='urdep_subject_desired_state', schema='public', inherit_schema=True, create_constraint=True),
               type_=postgresql.ENUM('started', 'stopped', 'destroyed', name='urdep_subject_desired_state'),
               existing_nullable=False,
               existing_server_default=sa.text("'started'::urdep_subject_desired_state"))
    op.alter_column('urdep_subject', 'current_state',
               existing_type=sa.Enum('new', 'provision-waiting', 'provision-pending', 'provisioning', 'provision-failed', 'start-waiting', 'start-pending', 'starting', 'start-failed', 'started', 'stop-waiting', 'stop-pending', 'stopping', 'stop-failed', 'stopped', 'destroy-waiting', 'destroy-pending', 'destroying', 'destroy-failed', 'destroyed', name='urdep_subject_current_state', schema='public', inherit_schema=True, create_constraint=True),
               type_=postgresql.ENUM('new', 'provision-waiting', 'provision-pending', 'provisioning', 'provision-failed', 'start-waiting', 'start-pending', 'starting', 'start-failed', 'started', 'stop-waiting', 'stop-pending', 'stopping', 'stop-failed', 'stopped', 'destroy-waiting', 'destroy-pending', 'destroying', 'destroy-failed', 'destroyed', name='urdep_subject_current_state'),
               existing_nullable=False,
               existing_server_default=sa.text("'new'::urdep_subject_current_state"))
    op.drop_constraint(None, 'urdep_governor', schema='public', type_='foreignkey')
    op.drop_constraint(None, 'urdep_governor', schema='public', type_='foreignkey')
    op.drop_constraint(None, 'urdep_governor', schema='public', type_='foreignkey')
    op.drop_constraint(None, 'urdep_governor', schema='public', type_='foreignkey')
    op.drop_constraint(None, 'urdep_governor', schema='public', type_='foreignkey')
    op.create_foreign_key('urdep_governor_status_actuator_uuid_fkey', 'urdep_governor', 'urdep_actuator', ['status_actuator_uuid'], ['uuid'])
    op.create_foreign_key('urdep_governor_stop_actuator_uuid_fkey', 'urdep_governor', 'urdep_actuator', ['stop_actuator_uuid'], ['uuid'])
    op.create_foreign_key('urdep_governor_provision_actuator_uuid_fkey', 'urdep_governor', 'urdep_actuator', ['provision_actuator_uuid'], ['uuid'])
    op.create_foreign_key('urdep_governor_destroy_actuator_uuid_fkey', 'urdep_governor', 'urdep_actuator', ['destroy_actuator_uuid'], ['uuid'])
    op.create_foreign_key('urdep_governor_start_actuator_uuid_fkey', 'urdep_governor', 'urdep_actuator', ['start_actuator_uuid'], ['uuid'])
    op.drop_constraint(None, 'urdep_action', schema='public', type_='foreignkey')
    op.drop_constraint(None, 'urdep_action', schema='public', type_='foreignkey')
    op.create_foreign_key('urdep_action_subject_uuid_fkey', 'urdep_action', 'urdep_subject', ['subject_uuid'], ['uuid'], ondelete='CASCADE')
    op.create_foreign_key('urdep_action_actuator_uuid_fkey', 'urdep_action', 'urdep_actuator', ['actuator_uuid'], ['uuid'], ondelete='CASCADE')
    op.alter_column('urdep_action', 'action_state',
               existing_type=sa.Enum('new', 'waiting', 'pending', 'running', 'failed', 'successful', name='urdep_action_state', schema='public', inherit_schema=True, create_constraint=True),
               type_=postgresql.ENUM('new', 'waiting', 'pending', 'running', 'failed', 'successful', name='urdep_action_state'),
               existing_nullable=False,
               existing_server_default=sa.text("'new'::urdep_action_state"))
    op.alter_column('urdep_action', 'kind',
               existing_type=sa.Enum('provision', 'start', 'stop', 'status', 'destroy', name='urdep_action_kind', schema='public', inherit_schema=True, create_constraint=True),
               type_=postgresql.ENUM('provision', 'start', 'stop', 'status', 'destroy', name='urdep_action_kind'),
               existing_nullable=False)
    op.drop_constraint(None, 'public.urdep_governor_component', type_='foreignkey')
    op.drop_constraint(None, 'public.urdep_governor_component', type_='foreignkey')
    op.create_foreign_key('public.urdep_governor_component_linked_governor_uuid_fkey', 'public.urdep_governor_component', 'urdep_governor', ['linked_governor_uuid'], ['uuid'])
    op.create_foreign_key('public.urdep_governor_component_governor_uuid_fkey', 'public.urdep_governor_component', 'urdep_governor', ['governor_uuid'], ['uuid'], ondelete='CASCADE')
    # ### end Alembic commands ###
